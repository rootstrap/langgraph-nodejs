import { HumanMessage } from '@langchain/core/messages';
import { ChatGoogleGenerativeAI } from "@langchain/google-genai";
import { DependencyRiskAnnotation } from '../agent';

export async function vulnerabilityAnalyzer(state: typeof DependencyRiskAnnotation.State):
    Promise<{ vulnerabilities: string[] }> {
    console.log(`Running vulnerabilityAnalyzer`);
    const llm = new ChatGoogleGenerativeAI(
        {
            model: 'gemini-1.5-flash',
            apiKey: process.env.GEMINI_API_KEY
        }
    );
    const vulnerabilities: string[] = [];

    for (const [dependency, version] of Object.entries(state.dependencies)) {
        try {
            const input = [
                new HumanMessage({
                    content: [
                        {
                            type: "text",
                            text: 'You are a security analyst for software dependencies.',
                            role: 'system'
                        },
                        {
                            type: "text",
                            text: `Analyze the dependency "${dependency}" (version "${version}") only for known vulnerabilities.`,
                            role: 'user'
                        },

                    ],
                }),
            ];

            const response = await llm.invoke(input);
            vulnerabilities.push(response.content.toString());

        } catch (error) {
            console.error('Error generating response:', error);
            throw new Error('Failed to generate response from Gemini');
        }
    }
    return { vulnerabilities };
}
